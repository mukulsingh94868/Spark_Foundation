# -*- coding: utf-8 -*-
"""Task1_GRIP_Data_Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eraQOjeQBtjv1kompwEgQ2lFEAMbLLja

# **The Spark Foundation**
# **Task1 : Predict using Supervised Machine Learning**
Predict the percentage of an student based on the no. of study hours.
# Name : Mukul Singh
"""

# importing the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

# Reading the Data 
data = pd.read_csv('http://bit.ly/w-data')
data.head(10)

# Check if there any null value in the Dataset
data.isnull == True

""" **we have to visualize our data**"""

sns.set_style('darkgrid')
sns.scatterplot(y= data['Scores'], x= data['Hours'])
plt.title('Marks Vs Study Hours',size=20)
plt.ylabel('Percentage', size=12)
plt.xlabel('Hours', size=12)
plt.show()

"""**There is a relation between Hours and Percentage. We have to make a plot of regression.**"""

sns.regplot(x= data['Hours'], y= data['Scores'])
plt.title('Regression Plot',size=20)
plt.ylabel('Percentage', size=12)
plt.xlabel('Hours', size=12)
plt.show()
print(data.corr())

"""# **Train the Model**

**1. Splitting the Model**
"""

# Defining X and y from the Data
X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

# Spliting the Data in two
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)

"""**2. Fitting data into model**"""

regression = LinearRegression()
regression.fit(train_X, train_y)
print("---------Model Trained---------")

"""# **Predicting the Percantage of Marks**"""

pred_y = regression.predict(val_X)
prediction = pd.DataFrame({'Hours': [i[0] for i in val_X], 'Predicted Marks': [k for k in pred_y]})
prediction

"""# **Comparing predicting marks with actual marks**"""

compare_scores = pd.DataFrame({'Actual Marks': val_y, 'Predicted Marks': pred_y})
compare_scores

"""# **Visually comparing predictive marks with actual marks**"""

plt.scatter(x=val_X, y=val_y, color='blue')
plt.plot(val_X, pred_y, color='Black')
plt.title('Actual vs Predicted', size=20)
plt.ylabel('Percentage', size=12)
plt.xlabel('Hours', size=12)
plt.show()

"""# **Evaluating the Model**"""

# Calculating the accuracy of the model
print('Mean absolute error: ',mean_absolute_error(val_y,pred_y))

"""
# **What will be the predicted score of a student if he/she studies for 9.25 hrs/ day?**
"""

hours = [9.25]
answer = regression.predict([hours])
print("Score = {}".format(round(answer[0],3)))

"""**According to the regression model if a student studies for 9.25 hours a day he/she is likely to score 93.89 marks.**"""